# -*- coding: utf-8 -*-
"""
‰øÆÊ≠£ÂæåÁöÑ Firebase API ÂÆ¢Êà∂Á´Ø
ËôïÁêÜËàá Firebase Functions ÁöÑÈÄöË®äÔºåÊîØÊè¥Ë®≠ÂÇôÁ∂ÅÂÆöÈò≤ÂÖ±Áî®
"""

import requests
import base64
import hashlib
import platform
import uuid
import subprocess
from typing import Dict, Any, Optional
import json

class FirebaseClient:
    def __init__(self):
        # ‰øÆÊ≠£ÂæåÁöÑ Firebase Functions v2 URL
        self.base_url = "https://us-central1-ticketswift-al241.cloudfunctions.net"
        self.device_fingerprint = self._generate_device_fingerprint()
        
    def _generate_device_fingerprint(self) -> str:
        """ÁîüÊàêË®≠ÂÇôÊåáÁ¥ã"""
        try:
            if platform.system() == "Windows":
                # Windows: ‰ΩøÁî®‰∏ªÊùøÂ∫èËôü + CPU ID
                try:
                    cmd = ['wmic', 'baseboard', 'get', 'serialnumber']
                    result = subprocess.check_output(cmd, shell=True, stderr=subprocess.DEVNULL).decode()
                    board_serial = result.split('\n')[1].strip()
                    
                    cmd = ['wmic', 'cpu', 'get', 'processorid']
                    result = subprocess.check_output(cmd, shell=True, stderr=subprocess.DEVNULL).decode()
                    cpu_id = result.split('\n')[1].strip()
                    
                    device_info = f"{board_serial}-{cpu_id}"
                except:
                    # ÂÇôÁî®ÊñπÊ°à
                    device_info = f"{platform.node()}-{uuid.uuid4().hex}"
                    
            elif platform.system() == "Darwin":  # macOS
                try:
                    # macOS: ‰ΩøÁî®Á°¨È´î UUID
                    cmd = ['system_profiler', 'SPHardwareDataType']
                    result = subprocess.check_output(cmd, stderr=subprocess.DEVNULL).decode()
                    
                    hardware_uuid = "unknown"
                    for line in result.split('\n'):
                        if 'Hardware UUID' in line:
                            hardware_uuid = line.split(':')[1].strip()
                            break
                    
                    device_info = f"{hardware_uuid}-{platform.machine()}"
                except:
                    device_info = f"{platform.node()}-{uuid.uuid4().hex}"
            
            else:
                # Linux ÊàñÂÖ∂‰ªñÁ≥ªÁµ±
                device_info = f"{platform.node()}-{platform.machine()}-{uuid.uuid1().hex}"
            
            # ÁîüÊàêÊúÄÁµÇÊåáÁ¥ã
            fingerprint = hashlib.sha256(device_info.encode()).hexdigest()[:32]
            print(f"üîß Ë®≠ÂÇôÊåáÁ¥ã: {fingerprint}")
            return fingerprint
            
        except Exception as e:
            print(f"‚ö†Ô∏è ÁîüÊàêË®≠ÂÇôÊåáÁ¥ãÂ§±ÊïóÔºå‰ΩøÁî®ÂÇôÁî®ÊñπÊ°à: {e}")
            fallback = f"{platform.system()}-{platform.machine()}-{uuid.uuid4().hex}"
            return hashlib.sha256(fallback.encode()).hexdigest()[:32]
    
    def verify_and_fetch_config(self, verification_code: str, force_unbind: bool = False) -> Dict[str, Any]:
        """
        È©óË≠âÈ©óË≠âÁ¢º‰∏¶Áç≤ÂèñÈÖçÁΩÆ
        ÂåÖÂê´Ê¥ªÂãïË≥áË®ä„ÄÅ‰ΩøÁî®ËÄÖÂÅèÂ•ΩË®≠ÂÆö„ÄÅOpenAI API Key
        """
        # ‰øÆÊ≠£ÂæåÁöÑ URL
        url = f"{self.base_url}/verifyAndFetchConfig"
        
        payload = {
            "verificationCode": verification_code,
            "deviceFingerprint": self.device_fingerprint,
            "forceUnbind": force_unbind
        }
        
        try:
            print(f"üîÑ Ê≠£Âú®È©óË≠âÈ©óË≠âÁ¢º: {verification_code}")
            print(f"üîó Ë´ãÊ±Ç URL: {url}")
            
            response = requests.post(
                url,
                json=payload,
                headers={
                    "Content-Type": "application/json",
                    "User-Agent": f"TicketGrabber/{platform.system()}"
                },
                timeout=30
            )
            
            print(f"üì° ÂõûÊáâÁãÄÊÖã: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    
                    if result.get('success'):
                        # Ëß£ÂØÜ API Key
                        if 'apiKey' in result.get('data', {}):
                            result['data']['apiKey'] = self._decrypt_api_key(
                                result['data']['apiKey']
                            )
                        
                        # È°ØÁ§∫Ë®≠ÂÇôÁ∂ÅÂÆöÁãÄÊÖã
                        device_info = result.get('data', {}).get('bindingInfo', {})
                        print(f"‚úÖ Ë®≠ÂÇôÁ∂ÅÂÆöÁãÄÊÖã: {device_info.get('policy', 'strict')}")
                        
                        return result
                    else:
                        return result
                        
                except json.JSONDecodeError as e:
                    return {
                        "success": False,
                        "message": f"‰º∫ÊúçÂô®ÂõûÊáâÊ†ºÂºèÈåØË™§: {str(e)}"
                    }
            
            elif response.status_code == 403:
                try:
                    error_response = response.json()
                    # Ê™¢Êü•ÊòØÂê¶ÂèØ‰ª•Âº∑Âà∂Ëß£Á∂Å
                    binding_info = error_response.get('bindingInfo', {})
                    if binding_info.get('canForceUnbind'):
                        # Ë©¢ÂïèÁî®Êà∂ÊòØÂê¶Ë¶ÅÂº∑Âà∂Ëß£Á∂Å
                        return {
                            "success": False,
                            "message": error_response.get('message'),
                            "can_force_unbind": True,
                            "binding_info": binding_info
                        }
                    else:
                        return error_response
                except:
                    return {
                        "success": False,
                        "message": "Ê≠§È©óË≠âÁ¢ºÂ∑≤Âú®ÂÖ∂‰ªñË®≠ÂÇô‰∏ä‰ΩøÁî®ÔºåÁÑ°Ê≥ïÂú®Êú¨Ë®≠ÂÇô‰ΩøÁî®"
                    }
            
            elif response.status_code == 404:
                return {
                    "success": False,
                    "message": "È©óË≠âÁ¢º‰∏çÂ≠òÂú®ÊàñÂ∑≤ÈÅéÊúü"
                }
            
            else:
                try:
                    error_response = response.json()
                    return error_response
                except:
                    return {
                        "success": False,
                        "message": f"‰º∫ÊúçÂô®ÈåØË™§ ({response.status_code})"
                    }
                    
        except requests.exceptions.ConnectionError:
            return {
                "success": False,
                "message": "ÁÑ°Ê≥ïÈÄ£Êé•Âà∞‰º∫ÊúçÂô®ÔºåË´ãÊ™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑ö"
            }
        except requests.exceptions.Timeout:
            return {
                "success": False,
                "message": "Ë´ãÊ±ÇË∂ÖÊôÇÔºåË´ãÁ®çÂæåÂÜçË©¶"
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Êú™È†êÊúüÁöÑÈåØË™§: {str(e)}"
            }
    
    def mark_code_as_used(self, verification_code: str, 
                         status: str = "completed", 
                         details: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        Ê®ôË®òÈ©óË≠âÁ¢ºÁÇ∫Â∑≤‰ΩøÁî®
        """
        url = f"{self.base_url}/markCodeAsUsed"
        
        payload = {
            "verificationCode": verification_code,
            "deviceFingerprint": self.device_fingerprint,
            "status": status,
            "details": details or {}
        }
        
        try:
            response = requests.post(
                url,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print(f"‚úÖ ‰ΩøÁî®ÁãÄÊÖãÂ∑≤Êõ¥Êñ∞: {result.get('message')}")
                return result
            else:
                return response.json()
                
        except Exception as e:
            print(f"‚ö†Ô∏è ÁÑ°Ê≥ïÊõ¥Êñ∞‰ΩøÁî®ÁãÄÊÖã: {str(e)}")
            return {
                "success": False,
                "message": f"ÁãÄÊÖãÊõ¥Êñ∞Â§±Êïó: {str(e)}"
            }
    
    def _decrypt_api_key(self, encrypted_key: str) -> str:
        """
        Ëß£ÂØÜ API Key
        """
        try:
            # ÂÖàÊ™¢Êü•ÊòØÂê¶Â∑≤Á∂ìÊòØÊòéÊñá
            if encrypted_key.startswith('sk-'):
                return encrypted_key
                
            # ÂòóË©¶ base64 Ëß£Á¢º
            decoded = base64.b64decode(encrypted_key).decode('utf-8')
            return decoded
        except Exception as e:
            print(f"‚ö†Ô∏è API Key Ëß£ÂØÜÂ§±Êïó: {str(e)}")
            return encrypted_key
    
    def get_device_info(self) -> Dict[str, str]:
        """Áç≤ÂèñË®≠ÂÇôË≥áË®ä"""
        return {
            "device_fingerprint": self.device_fingerprint,
            "platform": platform.system(),
            "architecture": platform.architecture()[0],
            "machine": platform.machine(),
            "node": platform.node()
        }